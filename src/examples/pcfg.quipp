

data Nonterminal = N | V | NP | VP | Clause;

data Terminal = Cat | Dog | Jump | Run | That;

data Symbol = SN Nonterminal | ST Terminal;

expandNonterminal nt = case nt {
  N -> [[ST Cat, ST Dog]];
  V -> [[ST Jump, ST run]];
  NP -> [[SN N], [SN NP, ST That, SN VP]];
  VP -> [[SN V], [SN V, SN NP]];
};

def picker = memoize \nt ->
  let alts = expandNonterminal nt;
  let typ = tcategorical (length alts);
  let f = randFunction TUnit typ;
  \un -> alts !! f ();

def urec toSentence sym rest = case sym {
  ST t -> Cons t rest;
  SN nt ->
    let parts = picker nt ();
    foldr toSentence parts rest;
};
